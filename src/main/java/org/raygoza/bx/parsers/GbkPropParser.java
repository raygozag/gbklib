/* Generated By:JavaCC: Do not edit this line. GbkPropParser.java */
        package org.raygoza.bx.parsers;

        import org.raygoza.bx.model.GBKFeature;
        import org.raygoza.bx.model.GbkLocation;
        import org.raygoza.bx.model.KeyValue;
        import java.util.Vector;

        public class GbkPropParser implements GbkPropParserConstants {
                public static void main(String[] args) throws ParseException, TokenMgrError {
                 GbkPropParser parser = new GbkPropParser(System.in);
                 parser.Start();
                }

  final public Vector<GBKFeature> Start() throws ParseException {
  Token t;
  Vector<GBKFeature> feats = new Vector<GBKFeature>();
  GBKFeature gbkf=null;
  boolean add=true;
  KeyValue pair=null;
    label_1:
    while (true) {
      t = jj_consume_token(FEATURE_TYPE);
        gbkf= new GBKFeature(t.image.trim());
        add=true;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PINTERVAL:
        t = jj_consume_token(PINTERVAL);
          String[] rangex = t.image.trim().replace("..","#").split("#");
          gbkf.setStrand("+");
          GbkLocation location = new GbkLocation();
          if(rangex[0].contains("<")){
                location.setExtends_left(true);
          }
          if(rangex[0].contains(">")){
                location.setExtends_right(true);
          }
          location.setStart(Long.parseLong(rangex[0].replaceAll("<|>","")));
          location.setEnd(Long.parseLong(rangex[1].replaceAll("<|>","")));
          gbkf.addLocation(location);
        break;
      case NINTERVAL:
        t = jj_consume_token(NINTERVAL);
            String value = t.image.replace("complement(","").replace(")","");
                if(value.contains("order(")){
                  value = value.replace("order(","").replace("..","#");
                  String[] locations= value.split(",");
                  gbkf.setStrand("-");

                  for(int i=0; i < locations.length; i++){
                     String[] range2x = locations[i].trim().split("#");
                         GbkLocation location2 = new GbkLocation();
                     if(range2x[0].contains("<")){
                                location2.setExtends_left(true);
                          }
                          if(range2x[0].contains(">")){
                                location2.setExtends_right(true);
                          }
                          location2.setStart(Long.parseLong(range2x[0].replaceAll("<|>","")));
                          location2.setEnd(Long.parseLong(range2x[1].replaceAll("<|>","")));
                          gbkf.addLocation(location2);
                  }

                        //add=false;
                }else{

                        String[] range2x = value.trim().replace("..","#").split("#");
                          gbkf.setStrand("-");
                          GbkLocation location2 = new GbkLocation();
                          if(range2x[0].contains("<")){
                                location2.setExtends_left(true);
                          }
                          if(range2x[0].contains(">")){
                                location2.setExtends_right(true);
                          }
                          location2.setStart(Long.parseLong(range2x[0].replaceAll("<|>","")));
                          location2.setEnd(Long.parseLong(range2x[1].replaceAll("<|>","")));
                          gbkf.addLocation(location2);
                }
        break;
      case OINTERVAL:
        jj_consume_token(OINTERVAL);
         add=false;
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_2:
      while (true) {
        jj_consume_token(SLASHX);
        t = jj_consume_token(WD);
        pair = new KeyValue();
        pair.setKey(t.image);
        jj_consume_token(EQUAL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
          t = jj_consume_token(STRING_LITERAL);
          break;
        case NUMBER:
          t = jj_consume_token(NUMBER);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                pair.setValue(t.image.replaceAll("\u005cn","").replaceAll("[ ]+"," ").replace("\u005c"",""));
        if(pair.getValue().matches("[ |A|R|N|D|C|E|Q|G|H|I|L|K|M|F|P|S|T|W|Y|V]+")){
          pair.setValue(pair.getValue().replace(" ",""));
        }
        gbkf.put(pair.getKey(),pair.getValue());
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SLASHX:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
      }
                if(add==true){
                        feats.add(gbkf);
                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FEATURE_TYPE:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(ORIGINS);
                       {if (true) return feats;}
    jj_consume_token(0);
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public GbkPropParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1c0000,0x10002,0x80,0x4000,};
   }

  /** Constructor with InputStream. */
  public GbkPropParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GbkPropParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GbkPropParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GbkPropParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GbkPropParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GbkPropParser(GbkPropParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GbkPropParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }
